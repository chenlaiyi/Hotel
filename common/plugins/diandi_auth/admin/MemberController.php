<?php

/**
 * @Author: Wang chunsheng  email:2192138785@qq.com
 * @Date:   2025-06-16 11:38:40
 * @Last Modified by:   Wang chunsheng  email:2192138785@qq.com
 * @Last Modified time: 2025-06-16 22:59:48
 */



namespace common\plugins\diandi_auth\admin;


use admin\controllers\AController;
use common\models\User;
use admin\services\StoreService;
use common\helpers\ErrorsHelper;
use common\helpers\loggingHelper;
use common\helpers\ResultHelper;
use common\plugins\diandi_auth\models\MemberList;
use common\plugins\diandi_auth\models\MemberListRole;
use common\plugins\diandi_auth\services\MemberService;
use diandi\admin\models\searchs\User as UserSearch;
use Exception;
use Throwable;
use Yii;
use yii\db\ActiveRecord;
use yii\db\StaleObjectException;
use yii\web\NotFoundHttpException;


/**
 * MemberController implements the CRUD actions for ZyjMemberList model.
 */
class MemberController extends AController
{

    public string $modelSearchName = "MemberList";


    public $modelClass = 'plugins\diandi_auth\models\MemberList';
    /**
     * @var mixed|null
     */
    public mixed $spec;

    public function actions(): array
    {
        $this->spec = Yii::$app->request->input('spec', '');
        return parent::actions(); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all ZyjMemberList models.
     * @return array
     */

    public function actionIndex(): array
    {
        $searchModel = new UserSearch([]);
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return ResultHelper::json(200, '获取成功', [

            'searchModel' => $searchModel,

            'dataProvider' => $dataProvider,

            'modelSearchName' => $this->modelSearchName,

            'field' => $searchModel->attributeLabels()

        ]);
    }


    /**
     * Displays a single ZyjMemberList model.
     * @param integer $id
     * @return array
     */

    public function actionView($id): array
    {
        $view = MemberList::find()->where(['id' => $id])->with(['role'])->one();
        $data = $view->toArray();
        $data['role'] = MemberListRole::find()->where(['accountId' => $id])->select('roleId')->scalar();
        $user_id = $data['user_id'];
        return ResultHelper::json(200, '获取成功', $data);
    }

    function actionSetRole()
    {
        $transaction = Yii::$app->db->beginTransaction();

        try {
            $role = Yii::$app->request->input('role');
            if (empty($role)) {
                return ResultHelper::json(400, '请选择角色');
            }
            $user_id = Yii::$app->user->id;
            MemberService::saveMemberRole($user_id, $role);
            $transaction->commit();

            return ResultHelper::json(200, '编辑成功');
        } catch (Exception $e) {
            $transaction->rollBack();
            return ResultHelper::json(400, $e->getMessage());
        }
    }


    /**
     * Updates an existing ZyjMemberList model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return array
     * @throws NotFoundHttpException if the model cannot be found
     * @throws Throwable
     */

    public
    function actionUpdate($id): array
    {
        try {
            $role = Yii::$app->request->input('role');
            if (empty($role)) {
                return ResultHelper::json(400, '请选择角色');
            }
            $transaction = Yii::$app->db->beginTransaction();
            $model = $this->findModel($id);
            $data = Yii::$app->request->post();
            $old_password = $model->password;
            $member_store = Yii::$app->request->input('member_store', []);
            if ($model->load($data, '') && $model->save()) {
                $member_id = $model->member_id;
                $user_id = $model->user_id;
                $password = Yii::$app->request->input('password');
                if ($password != $old_password) {
                    $member = User::findByMobile($model->mobile);
                    if (!empty($member)) {
                        $member->password_hash = Yii::$app->security->generatePasswordHash($password);
                        $member->generatePasswordResetToken();
                        $member->save();
                    } else {
                        $User = new User();

                        $email = $model->mobile . '@zyj.com';
                        $userRes = $User->signup($model->name, $model->mobile, $email, $password, 1);
                        loggingHelper::writeLog('diandi_auth', 'afterSave-userlist', '会员注册', [
                            'userRes' => $userRes
                        ]);
                        if (!isset($userRes['access_token'])) {

                            throw new Exception($userRes['message']);
                        }

                        $user_id = $userRes['user']['id'];
                        $model->user_id = $user_id;
                        $model->save();
                    }
                }


                MemberService::saveMemberRole($model->user_id, $role);
            } else {
                $msg = ErrorsHelper::getModelError($model);
                throw new Exception($msg);
            }

            $transaction->commit();

            return ResultHelper::json(200, '编辑成功', $model->toArray());
        } catch (Exception $e) {
            $transaction->rollBack();
            return ResultHelper::json(400, $e->getMessage());
        }
    }

    function array_diff_assoc2_deep($array1, $array2)
    {
        $diff_left = array_diff($array1, $array2);
        $diff_right = array_diff($array2, $array1);
        $ret = array_merge($diff_left, $diff_right);
        $ret = array_values($ret);
        return array_unique($ret);
    }


    /**
     * Deletes an existing WeihExhibitionServiceProvider model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return array
     * @throws NotFoundHttpException if the model cannot be found
     * @throws Throwable
     * @throws StaleObjectException
     */

    public
    function actionDelete($id): array

    {

        $this->findModel($id)->delete();


        return ResultHelper::json(200, '删除成功');
    }

    function actionStore(): array
    {
        $list = StoreService::getAuthStores();
        $member_store_ids = ZyjWashStore::find()->where(['store_type' => 1])->select('store_id')->column();
        foreach ($list as $key => $item) {
            if (in_array($item['id'], $member_store_ids)) {
                unset($list[$key]);
            }
        }
        return ResultHelper::json(200, '获取成功', array_values($list));
    }


    function actionCloud(): array
    {
        $member_store = Yii::$app->request->input('member_store');
        $pid = ZyjWashStore::find()->where(['store_id' => $member_store])->select('id')->scalar();
        $clouds = ZyjWashStore::find()->where(['store_type' => 1, 'pid' => $pid])->with(['store'])->asArray()->all();
        $list = [];
        foreach ($clouds as $item) {
            $list[$item['store_id']] = [
                'id' => $item['store_id'],
                'pid' => $pid,
                'member_store' => $member_store,
                'bloc_id' => $item['store']['bloc_id'],
                'name' => $item['store']['name'],
                'text' => $item['store']['name'],
                "label" => $item['store']['name'],
                "value" => $item['store_id'],
            ];
        }
        return ResultHelper::json(200, '获取成功', array_values($list));
    }

    /**
     * Finds the ZyjMemberList model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return array|ActiveRecord the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */

    protected
    function findModel($id): array|ActiveRecord

    {

        if (($model = MemberList::findOne($id)) !== null) {

            return $model;
        }


        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
