<?php

namespace install\controllers;


use common\helpers\FileHelper;
use console\services\InstallServer;
use Exception;
use install\library\BaseInstall;
use PDO;
use Yii;
use yii\base\InvalidConfigException;
use yii\base\InvalidRouteException;
use yii\console\Application;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\Response;

class SiteController extends Controller
{

    public $enableCsrfValidation = false;

    public static $stepCacheKey = 'install_step_cache';

    public function behaviors(): array
    {
        $behaviors = parent::behaviors();
        $behaviors['verbs'] = [
            'class' => VerbFilter::class,
            'actions' => [
                'index' => ['get'],
                'step1' => ['post'],
                'step2' => ['post'],
                'init-sql' => ['post'],
            ],
        ];
        return $behaviors;
    }

    public function beforeAction($action)
    {
        if (BaseInstall::isInited()){
            throw new InvalidConfigException('已经安装过了');
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    function actionIndex(): string
    {
        return $this->render('index');
    }

    function actionCheck()
    {
        $install = new BaseInstall();
        $check_env = $install->checkEnv(array(
            'php_version'   =>  array(
                'required'  => '>= 8.1',
                'checker'   => 'phpChecker',
            ),
            'gd_version'   	=>  array(
                'required'  => '>= 1.0',
                'checker'   => 'gdChecker',
            ),
        ));

        $check_file = $install->checkFile(array(
            '../public/data',
            '../install/runtime',
            '../console/runtime',
            '../backend/runtime',
            '../public/runtime',
            '../admin/runtime',
            '../api/runtime',
        ));
        $params = [];
        $params['check_env'] = $check_env;
        $params['check_file'] = $check_file;
        $params['compatible'] = $check_env['compatible'] && $check_file['compatible'];
        $params['messages'] = array_merge($check_env['msg'], $check_file['msg']);
        $params['hiddens'] = ['accept' => true];

        return $this->asJson(['success' => true, 'message' => '校验成功', 'data' => $params]);
    }

    function actionInstall(): string
    {
        return $this->render('install');
    }

    /**
     */
    public function actionStep1()
    {
        $request = Yii::$app->request;
        $data = $request->post();

        $host = $data['host'] ?? '127.0.0.1';
        $port = $data['port'] ?? '3306';
        $dbname = $data['dbname'] ?? '';
        $tablePrefix = $data['tablePrefix'] ?? 'dd_';
        $dbusername = $data['dbusername'] ?? '';
        $dbpassword = $data['dbpassword'] ?? '';

        if (empty($dbname) || empty($dbusername) || empty($dbpassword)) {
            return $this->asJson(['success' => false, 'message' => '请填写所有必填字段', 'data' => $data]);
        }

        $is_connect = false;
        $error = '';

        try {
            $link = new PDO("mysql:host={$host};port={$port}", $dbusername, $dbpassword);
            $link->exec('SET character_set_connection=utf8, character_set_results=utf8, character_set_client=binary');
            $link->exec("SET sql_mode=''");
            if ($link->errorCode() != '00000') {
                $errorInfo = $link->errorInfo();
                $error = $errorInfo[2];
            } else {
                $statement = $link->query("SHOW DATABASES LIKE '{$dbname}';");
                $fetch = $statement->fetch();
                if (empty($fetch)) {
                    if (substr($link->getAttribute(PDO::ATTR_SERVER_VERSION), 0, 3) > '4.1') {
                        $link->query("CREATE DATABASE IF NOT EXISTS `{$dbname}` DEFAULT CHARACTER SET utf8");
                    } else {
                        $link->query("CREATE DATABASE IF NOT EXISTS `{$dbname}`");
                    }
                }
                $statement = $link->query("SHOW DATABASES LIKE '{$dbname}';");
                $fetch = $statement->fetch();
                if (empty($fetch)) {
                    $error .= '数据库不存在且创建数据库失败' . PHP_EOL;
                } else {
                    $is_connect = true;
                }
                if ($link->errorCode() != '00000') {
                    $errorInfo = $link->errorInfo();
                    $error .= $errorInfo[2];
                }
            }
        } catch (Exception $e) {
            $errorMsg = $e->getMessage();
            $is_connect = false;
            $error = "Exception:{$errorMsg}";
        }

        if ($is_connect) {
            $envConfig = <<<EOF
DB_HOST=$host
DB_PORT=$port
DB_PREFIX=$tablePrefix
DB_NAME=$dbname
DB_USER=$dbusername
DB_PASS=$dbpassword

REDIS_HOST=127.0.0.1
REDIS_AUTH=(null)
REDIS_PORT=6379
REDIS_DB=0
REDIS_PREFIX = hotel:

#WECHATOPENPLATFORMCONFIG_APP_ID =
#WECHATOPENPLATFORMCONFIG_SECRET =
#WECHATOPENPLATFORMCONFIG_TOKEN =
#WECHATOPENPLATFORMCONFIG_AES_KEY =

#RPC_SERVER_IP = 
#RPC_SERVER_PORT = 

not_allowd_ips = ''
EOF;


            $envFilePath = __DIR__.'/../../.env';
            if (!file_exists($envFilePath)) {
                touch($envFilePath);
                chmod($envFilePath, 0664);
            }
            $result = file_put_contents($envFilePath, $envConfig);
            if ($result === false) {
                $error = error_get_last();
                return $this->asJson(['success' => false, 'message' => '写入环境变量失败', 'data' => $error]);
            }
            return $this->asJson(['success' => true, 'message' => '数据库配置成功，下一步初始化数据']);
        } else {
            return $this->asJson(['success' => false, 'message' => $error]);
        }
    }

    /**
     */
    function actionInitSql()
    {
        $request = Yii::$app->request;
        $data = $request->post();

        $db_host = $data['host'] ?? '127.0.0.1';
        $db_port = $data['port'] ?? '3306';
        $db_name = $data['dbname'] ?? '';
        $db_prefix = $data['tablePrefix'] ?? 'dd_';
        $db_user = $data['dbusername'] ?? '';
        $db_password = $data['dbpassword'] ?? '';

        $version = Yii::$app->version;
        $bashPath = dirname(Yii::getAlias('@install'));

        Yii::$app->params['diandi.admin.configs'] = [
            'authManager' => [
                'class' => 'diandi\admin\components\DbManager', // 使用数据库管理配置文件
                'defaultRoles' => ['基础权限组'], //默认角色，该角色有最高权限
            ]
        ];

        $db_options = [
            	'db_host' => $db_host,
                'db_port' => $db_port,
                'db_name' => $db_name,
                'db_user' => $db_user,
                'db_password' => $db_password,
                'db_prefix' => $db_prefix,
        ];
        $BaseInstall = new BaseInstall($version,$db_options);

        $BaseInstall->createTable();
        return $this->asJson(['success' => true, 'message' => '数据库初始化成功，下一步注册管理员']);
    }

    public function actionStep2()
    {
        $request = Yii::$app->request;
        $data = $request->getBodyParams();

        $username = $data['username'] ?? '';
        $mobile = $data['mobile'] ?? '';
        $email = $data['email'] ?? '';
        $userpassword = $data['userpassword'] ?? '';

        if (empty($username) || empty($mobile) || empty($email) || empty($userpassword)) {
            return $this->asJson(['success' => false, 'message' => '请填写所有必填字段']);
        }
        try {
            // 假设 InstallServer::adminSignUp 是一个有效的注册方法
            $res = InstallServer::adminSignUp($username, $mobile, $email, $userpassword);
            if ($res) {
                BaseInstall::initend();
                return $this->asJson(['success' => true, 'message' => '系统安装成功，配置你的nginx就可以访问了']);
            } else {
                return $this->asJson(['success' => false, 'message' => '管理员注册失败','res'=>$res]);
            }
        }catch (Exception $e){
            return $this->asJson(['success' => false, 'message' => $e->getMessage(),'trace'=>$e->getTrace()]);
        }

    }



}
